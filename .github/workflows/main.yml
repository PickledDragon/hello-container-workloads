name: Java CI

on: [push]
env:
  REGISTRY_NAME: pickleddragon
  APP_NAME: container-demo
  CLUSTER_NAME: democluster
  CLUSTER_RES_GROUP: demo-ing
  NAMESPACE: container-demo-ns
  SECRET_NAME: demo-cr
  

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'
          
      - name: Build with Maven
        run: mvn --batch-mode --update-snapshots verify
        
      - name: Upload JAR Artifact
        uses: actions/upload-artifact@v2.2.3
        with:
          # Artifact name
          name: app.jar
          path: target/*.jar
          retention-days: 7
      
      - name: Login to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.REGISTRY_NAME }}.azurecr.io
          username: ${{ secrets.REGISTRY_USERNAME }} 
          password: ${{ secrets.REGISTRY_SECRET }}
          
      - name: Build docker image and push to ACR
        run: |
          docker build . -t ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ github.sha }}
          docker push ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ github.sha }}

      - name: Set AKS cluster context
        uses: azure/aks-set-context@v1
        with:
          creds: '${{ secrets.AZURE_CREDS }}'
          cluster-name: ${{ env.CLUSTER_NAME }}
          resource-group: ${{ env.CLUSTER_RES_GROUP }}

      - name: Check if namespace exists, create if not.
        run: |
          kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o json | kubectl apply -f -

      - name: Create image pull secret for ACR
        uses: azure/k8s-create-secret@v1
        with:
          container-registry-url: ${{ env.REGISTRY_NAME }}.azurecr.io
          container-registry-username: ${{ secrets.REGISTRY_USERNAME }}
          container-registry-password: ${{ secrets.REGISTRY_SECRET }}
          secret-name: ${{ env.SECRET_NAME }}
          namespace: ${{ env.NAMESPACE }}
          force: true
